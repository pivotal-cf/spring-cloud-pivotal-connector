/*
 * Copyright 2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

description = 'Spring Cloud Connectors for Spring Cloud Services on Cloud Foundry'

buildscript {
	repositories {
		maven { url "https://repo.spring.io/plugins-release" }
		mavenCentral()
		jcenter()
	}

	dependencies {
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
		classpath("io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE")
		classpath("io.spring.gradle:spring-io-plugin:0.0.4.RELEASE")
		classpath("nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0")
	}

	ext["spring-cloud-connectors.version"] = "1.2.0.RELEASE"
}

configure(allprojects) {
	apply plugin: "license"
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'propdeps'
	apply plugin: 'propdeps-maven'
	apply plugin: 'propdeps-eclipse'
	apply plugin: 'propdeps-idea'
	apply plugin: 'io.spring.dependency-management'
	apply from: "${rootProject.projectDir}/publish-maven.gradle"

	compileJava {
		sourceCompatibility=1.7
		targetCompatibility=1.7
	}
	compileTestJava {
		sourceCompatibility=1.8
		targetCompatibility=1.8
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Angel.SR3"
		}
	}

  if (project.hasProperty('platformVersion')) {
		apply plugin: 'spring-io'

		// necessary to resolve the Spring IO versions (which may include snapshots)
		repositories {
			maven { url "https://repo.spring.io/libs-snapshot" }
		}

		dependencyManagement {
			springIoTestRuntime {
				imports {
					mavenBom "io.spring.platform:platform-bom:${platformVersion}"
				}
			}
		}
	}

	dependencies {
		testCompile("junit:junit")
		testCompile("org.mockito:mockito-core")
	}

	repositories {
		maven { url "https://repo.spring.io/libs-release" }
		mavenCentral()
	}

	javadoc {
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
	}

	task packageSources(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar) {
		classifier = "javadoc"
		from javadoc
	}

	ext {
		javadocLinks = [
				'http://docs.oracle.com/javase/7/docs/api/',
				'http://docs.oracle.com/javaee/6/api/',
				'http://docs.spring.io/spring/docs/current/javadoc-api/',
		] as String[]
	}

	task api(type: Javadoc) {
		group = "Documentation"
		description = "Generates aggregated Javadoc API documentation."
		title = "${rootProject.description} ${version} API"
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = rootProject.description
		options.links(project.ext.javadocLinks)

		source subprojects.collect { project ->
			project.sourceSets.main.allJava
		}

		classpath = files(subprojects.collect { project ->
			project.sourceSets.main.compileClasspath
		})

		maxMemory = "1024m"
		destinationDir = new File(buildDir, "api")
	}

	task docsZip(type: Zip) {
		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing api and reference " +
				"for deployment at docs.spring.io/spring-cloud/docs."

		from(api) {
			into 'api'
		}
	}

	artifacts {
		archives packageSources
		archives javadocJar
	}

	task dist(dependsOn: assemble) {
		group = 'Distribution'
		description = 'Builds -dist and -docs distribution archives.'
	}
}

project(":spring-cloud-services-connector-core") {
	archivesBaseName = "spring-cloud-services-connector-core"

	dependencies {
		compile("org.springframework.cloud:spring-cloud-core")
	}
}

project(":spring-cloud-services-cloudfoundry-connector") {
	archivesBaseName = "spring-cloud-services-cloudfoundry-connector"

	dependencies {
		compile(project(":spring-cloud-services-connector-core"))
		compile("org.springframework.cloud:spring-cloud-cloudfoundry-connector")
		testCompile(group: "org.springframework.cloud", name: "spring-cloud-cloudfoundry-connector", classifier: "tests")
		testCompile("com.fasterxml.jackson.core:jackson-databind")
	}
}

project(":spring-cloud-services-spring-connector") {
	archivesBaseName = "spring-cloud-services-spring-connector"

	dependencies {
		compile(project(":spring-cloud-services-connector-core"))
		compile("org.springframework.cloud:spring-cloud-spring-service-connector")
		optional("org.springframework.cloud:spring-cloud-config-client")
		optional("org.springframework.cloud:spring-cloud-netflix-core")
		optional("com.netflix.eureka:eureka-client")
		optional("org.springframework.amqp:spring-rabbit")
		optional("com.sun.jersey:jersey-client")
		optional("org.springframework.security.oauth:spring-security-oauth2")
		optional("org.springframework.data:spring-data-redis")
		optional("org.springframework.data:spring-data-mongodb")
		provided("org.projectlombok:lombok")
		testCompile("org.apache.tomcat.embed:tomcat-embed-el")
		testCompile("org.springframework.boot:spring-boot-starter-test")
		testCompile(group: "org.springframework.cloud", name: "spring-cloud-commons")
		testCompile(group: "org.springframework.cloud", name: "spring-cloud-core", classifier: "tests")
		testCompile("org.springframework.cloud:spring-cloud-cloudfoundry-connector")
		testCompile(group: "org.springframework.cloud", name: "spring-cloud-cloudfoundry-connector", classifier: "tests")
		testCompile("commons-logging:commons-logging")
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.7'
}

downloadLicenses {
	dependencyConfiguration "compile"
}

